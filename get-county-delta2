#!/usr/bin/perl

%state_number_map = (
	"01" => "AL", "02" => "AK", "04" => "AZ", "05" => "AR", "06" => "CA",
	"08" => "CO", "09" => "CT", "10" => "DE", "11" => "DC", "12" => "FL",
	"13" => "GA", "15" => "HI", "16" => "ID", "17" => "IL", "18" => "IN",
	"19" => "IA", "20" => "KS", "21" => "KY", "22" => "LA", "23" => "ME",
	"24" => "MD", "25" => "MA", "26" => "MI", "27" => "MN", "28" => "MS",
	"29" => "MO", "30" => "MT", "31" => "NE", "32" => "NV", "33" => "NH",
	"34" => "NJ", "35" => "NM", "36" => "NY", "37" => "NC", "38" => "ND",
	"39" => "OH", "40" => "OK", "41" => "OR", "42" => "PA", "44" => "RI",
	"45" => "SC", "46" => "SD", "47" => "TN", "48" => "TX", "49" => "UT",
	"50" => "VT", "51" => "VA", "53" => "WA", "54" => "WV", "55" => "WI",
	"56" => "WY", "60" => "AS", "66" => "GU", "69" => "MP", "72" => "PR",
	"78" => "VI",
);

if ($#ARGV >= 0) {
	@counties = @ARGV;
} else {
	@counties = (
		"18011", # Boone
		"18057", # Hamilton
		"18023", # Clinton
		"18159", # Tipton
	);
}

print <<EOF
SET CLIENT_ENCODING TO UTF8;
SET STANDARD_CONFORMING_STRINGS TO ON;
BEGIN;
CREATE TABLE "tiger" (gid serial PRIMARY KEY,
"age" varchar(20),
"class" varchar(20),
"fullname" varchar(100));
SELECT AddGeometryColumn('','tiger','geom','0','MULTILINESTRING',2);
COMMIT;
EOF
;

for $county (@counties) {
	print STDERR "county $county\n";
	print "BEGIN;\n";

	%old = ();
	%new = ();
	%dup = ();

	%kind = ();
	%name = ();
	%points = ();
	%class = ();
	$nedge = 0;

	$state = substr($county, 0, 2);
	$statename = $state_number_map{$state};
	$file = "tiger/www2.census.gov/geo/tiger/tiger2006se/$statename/TGR${county}.ZIP";

	open(IN, "unzip -p $file TGR$county.RT2 |");
	while (<IN>) {
		chomp;
		$tlid = substr($_, 5, 10);
		$tlid =~ s/^ *//;

		for ($i = 18; $i < 208; $i += 19) {
			$lon = sprintf("%.5f", substr($_, $i, 10) / 1000000);
			$lat = sprintf("%.5f", substr($_, $i + 10, 9) / 1000000);

			if ($lat != 0) {
				push @{$lats{$tlid}}, $lat;
				push @{$lons{$tlid}}, $lon;
			}
		}
	}
	close(IN);

	open(IN, "unzip -p $file TGR$county.RT1 |");
	while (<IN>) {
		chomp;
		$tlid = substr($_, 5, 10);
		$tlid =~ s/^ *//;

		$class = substr($_, 55, 3);
		next unless ($class =~ /^A/ || $class =~ /B/); # roads, railroads

		$startlon = sprintf("%.5f", substr($_, 190, 10) / 1000000);
		$startlat = sprintf("%.5f", substr($_, 200, 9) / 1000000);
		$endlon = sprintf("%.5f", substr($_, 209, 10) / 1000000);
		$endlat = sprintf("%.5f", substr($_, 219, 9) / 1000000);

		$fullname = substr($_, 17, 2 + 30 + 4 + 2);
		$fullname =~ s/^ *//;
		$fullname =~ s/ *$//;
		$fullname =~ s/ +/ /g;
		$fullname =~ s/'/''g/;

		unshift @{$lats{$tlid}}, $startlat;
		unshift @{$lons{$tlid}}, $startlon;

		push @{$lats{$tlid}}, $endlat;
		push @{$lons{$tlid}}, $endlon;

		@lats = @{$lats{$tlid}};
		@lons = @{$lons{$tlid}};

		$nedge++;
		$kind{$nedge} = "old";
		$name{$nedge} = $fullname;
		$class{$nedge} = $class;

		for ($i = 0; $i < $#lats; $i++) {
			if ($i == 0) {
				push @{$points{$nedge}}, "$lons[$i] $lats[$i]";
			}

			push @{$points{$nedge}}, "$lons[$i + 1] $lats[$i + 1]";
			@p = sort("$lons[$i] $lats[$i]", "$lons[$i + 1] $lats[$i + 1]");
			$old{"$p[0] $p[1]"} = 1;
		}
	}
	close(IN);

	open(IN, "java shpcat tiger/www2.census.gov/geo/tiger/TIGER2012/EDGES/tl_2012_${county}_edges.zip |");
	while (<IN>) {
		chomp;

                ($state, $cty, $tlid, $tfidl, $tfidr, $mtfcc, $fullname, $smid, $addrls, $addrle, $addrrs, $addrre) = split(/\|/);
		next unless ($mtfcc =~ /^S/ || $mtfcc =~ /R/); # roads, railroads

		next unless /polyline/;
		s/.*polyline //;

		@points = split(/ /, $_);

		$fullname =~ s/ *$//;
		$fullname =~ s/ +/ /g;
		$fullname =~ s/'/''g/;

		$nedge++;
		$kind{$nedge} = "new";
		$name{$nedge} = $fullname;
		$class{$nedge} = $mtfcc;

		for ($i = 0; $i < $#points; $i++) {
			($lon1, $lat1) = split(/,/, $points[$i]);
			($lon2, $lat2) = split(/,/, $points[$i + 1]);

			$lat1 = sprintf("%.5f", $lat1);
			$lon1 = sprintf("%.5f", $lon1);
			$lat2 = sprintf("%.5f", $lat2);
			$lon2 = sprintf("%.5f", $lon2);

			if ($i == 0) {
				push @{$points{$nedge}}, "$lon1 $lat1";
			}

			push @{$points{$nedge}}, "$lon2 $lat2";
			@p = sort("$lon1 $lat1", "$lon2 $lat2");
			$new{"$p[0] $p[1]"} = 1;
		}
	}
	close(IN);

	for $n (keys(%new)) {
		if ($old{$n}) {
			$dup{$n} = 1;
		}
	}

	for ($i = 0; $i < $nedge; $i++) {
		@points = @{$points{$i}};

		for ($j = 0; $j < $#points; $j++) {
			@p = sort($points[$j], $points[$j + 1]);

			if ($dup{"$p[0] $p[1]"}) {
				if ($within) {
					print "))');\n";
					$within = 0;
				}

				# print "DUPLICATE ($p[0] $p[1])\n";
			} else {
				if (!$within) {
					print "INSERT INTO \"tiger\" (\"age\",\"class\",\"fullname\",geom) ";
					print "VALUES ('$kind{$i}','$class{$i}','$name{$i}',";
					print "'MULTILINESTRING((";

					print "$points[$j]";
					$within = 1;
				}

				print ", $points[$j + 1]";

				if (0) {
					if ($within++ == 10) {
						print "))');\n";
						$within = 0;
					}
				}
			}
		}

		if ($within) {
			print "))');\n";
			$within = 0;
		}
	}

	print "COMMIT;\n";
}
