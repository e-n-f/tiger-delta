#!/usr/bin/perl

%state_number_map = (
	"01" => "AL", "02" => "AK", "04" => "AZ", "05" => "AR", "06" => "CA",
	"08" => "CO", "09" => "CT", "10" => "DE", "11" => "DC", "12" => "FL",
	"13" => "GA", "15" => "HI", "16" => "ID", "17" => "IL", "18" => "IN",
	"19" => "IA", "20" => "KS", "21" => "KY", "22" => "LA", "23" => "ME",
	"24" => "MD", "25" => "MA", "26" => "MI", "27" => "MN", "28" => "MS",
	"29" => "MO", "30" => "MT", "31" => "NE", "32" => "NV", "33" => "NH",
	"34" => "NJ", "35" => "NM", "36" => "NY", "37" => "NC", "38" => "ND",
	"39" => "OH", "40" => "OK", "41" => "OR", "42" => "PA", "44" => "RI",
	"45" => "SC", "46" => "SD", "47" => "TN", "48" => "TX", "49" => "UT",
	"50" => "VT", "51" => "VA", "53" => "WA", "54" => "WV", "55" => "WI",
	"56" => "WY", "60" => "AS", "66" => "GU", "69" => "MP", "72" => "PR",
	"78" => "VI",
);

if ($#ARGV >= 0) {
	@counties = @ARGV;
} else {
	@counties = (
		"18011", # Boone
		"18057", # Hamilton
		"18023", # Clinton
		"18159", # Tipton
	);
}

for $county (@counties) {
	%old = ();
	%new = ();

	%lats = ();
	%lons = ();


	$state = substr($county, 0, 2);
	$statename = $state_number_map{$state};
	$file = "/data/data/tiger/2006/www2.census.gov/geo/tiger/tiger2006se/$statename/TGR${county}.ZIP";


	open(IN, "unzip -p $file TGR$county.RT2 |");
	while (<IN>) {
		chomp;
		$tlid = substr($_, 5, 10);
		$tlid =~ s/^ *//;

		for ($i = 18; $i < 208; $i += 19) {
			$lon = substr($_, $i, 10) / 1000000;
			$lat = substr($_, $i + 10, 9) / 1000000;

			if ($lat != 0) {
				push @{$lats{$tlid}}, $lat;
				push @{$lons{$tlid}}, $lon;
			}
		}
	}
	close(IN);

	open(IN, "unzip -p $file TGR$county.RT1 |");
	while (<IN>) {
		chomp;
		$tlid = substr($_, 5, 10);
		$tlid =~ s/^ *//;

		$startlon = substr($_, 190, 10) / 1000000;
		$startlat = substr($_, 200, 9) / 1000000;
		$endlon = substr($_, 209, 10) / 1000000;
		$endlat = substr($_, 219, 9) / 1000000;

		unshift @{$lats{$tlid}}, $startlat;
		unshift @{$lons{$tlid}}, $startlon;

		push @{$lats{$tlid}}, $endlat;
		push @{$lons{$tlid}}, $endlon;

		@lats = @{$lats{$tlid}};
		@lons = @{$lons{$tlid}};

		for ($i = 0; $i < $#lats; $i++) {
			@p = sort("$lats[$i],$lons[$i]", "$lats[$i + 1],$lons[$i + 1]");
			$old{"$p[0] $p[1]"} = 1;
		}
	}
	close(IN);

	open(IN, "java shpcat /data/data/tiger/2013/www2.census.gov/geo/tiger/TIGERrd13/EDGES/tl_rd13_${county}_edges.zip |");
	while (<IN>) {
		chomp;
		next unless /polyline/;
		s/.*polyline //;

		@points = split(/ /, $_);

		for ($i = 0; $i < $#points; $i++) {
			($lon1, $lat1) = split(/,/, $points[$i]);
			($lon2, $lat2) = split(/,/, $points[$i + 1]);

			@p = sort("$lat1,$lon1", "$lat2,$lon2");
			$new{"$p[0] $p[1]"} = 1;
		}
	}
	close(IN);

	for $n (keys(%new)) {
		unless ($old{$n}) {
			print "$n 4:2\n";
		}
	}

	for $o (keys(%old)) {
		unless ($new{$o}) {
			print "$o 4:11\n";
		}
	}
}
